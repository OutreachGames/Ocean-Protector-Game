--OVERVIEW:
--setups and controls main HUD

-- dependencies
local HSH = require ("modules.hashes_md")
local MY_GOO = require ("gui.gooey_theme_md")
local STR = require ("modules.screenplay_md")

-- constants
local CV_item_groups = {
	item_ph = {
		group_name = "/group_item_ph",
		plot_y_range = {7.5, 8.2},
		plot_y_label = "Ocean pH"
	},
	item_plankton = {
		group_name = "/group_item_plankton",
		plot_y_range = {0.0, 1.0},
		plot_y_label = "Plankton Health"
	},
	item_coral = {
		group_name = "/group_item_coral",
		plot_y_range = {0.0, 1.0},
		plot_y_label = "Coral Health"
	},
	item_fish = {
		group_name = "/group_item_fish",
		plot_y_range = {0.0, 1.0},
		plot_y_label = "Fish Health"
	},
	item_mollusks = {
		group_name = "/group_item_mollusks",
		plot_y_range = {0.0, 1.0},
		plot_y_label = "Mollusk Health"
	},
	item_crustaceans = {
		group_name = "/group_item_crustaceans",
		plot_y_range = {0.0, 1.0},
		plot_y_label = "Crustacean Health"
	},
	item_humans = {
		group_name = "/group_item_humans",
		plot_y_range = {0.0, 1.0},
		plot_y_label = "Human Health"
	}
}

local CV_gameplay_loop = {
	status_started = 1,
	status_finished = 2,
	status_unknown = 3
}


-- functions

local function Items_Set_Color_Tracking(self, item_name, needs_to_be_clicked)

	-- set color in data view for color and bar

	--"hud_data/group_item_ph/gnode_controller"
	local data_info = self.hud_data_constant
	local item_base_groupname = data_info.goo_group_names[item_name]
	if item_base_groupname == nil then
		print("Error item name of <"..tostring(item_name).."> is not present in HUD Data Constant table ...\n")
		return
	end

	local color_text, color_bar

	if needs_to_be_clicked then
		color_text = MY_GOO.COLOR_NEEDS_SELECTED
		color_bar = MY_GOO.COLOR_NEEDS_SELECTED
	else
		color_text = MY_GOO.COLOR_TEXT_DEFAULT
		color_bar = MY_GOO.COLOR_DEFAULT
	end

	gui.set_color(gui.get_node(item_base_groupname..data_info.item_health_bar_basename), color_bar)
	gui.set_color(gui.get_node(item_base_groupname..data_info.item_text_basename), color_text)

end

local function Items_Click_Status_Reset(self, items_to_click)

	-- update tracker lists of what items need to be clicked and which items have been clicked

	self.items_all_clicked = true

	self.items_that_need_clicked_list = nil
	self.items_that_need_clicked_list = {}
	self.items_that_need_clicked_sum = 0

	self.items_that_were_clicked_list = nil
	self.items_that_were_clicked_list = {}
	self.items_that_were_clicked_sum = 0

	-- if there are items to add to 'needs click' list then add them
	-- also save that we have not clicked them all yet
	local sum_to_click = 0
	if type(items_to_click) == "table" then
		for _,v_itemname in ipairs(items_to_click) do
			sum_to_click = sum_to_click + 1
			self.items_that_need_clicked_list[v_itemname] = true
			Items_Set_Color_Tracking(self, v_itemname, true)
		end
		if sum_to_click > 0 then
			self.items_all_clicked = false
			self.items_that_need_clicked_sum = sum_to_click
		end
	end

end

local function Get_Current_Stage_Substage(self)

	-- returns two string values for current stage and substage

	local event_info = self.gameplay_loop_order[self.gameplay_loop_i_key]

	local stage_key = event_info.stage_name_key
	local substage_key = event_info.substage_name_key

	return stage_key, substage_key

end


-- HUD Process: Observe Items (Section 1)
local function On_GO_Items_Clicked_Reset(self, enabled_setting)

	if enabled_setting == nil then
		enabled_setting = false
	end

	self.hud_can_select_go_items = enabled_setting

end

local function On_GO_Items_Clicked_Basic_Valid(self)

	-- failsafe for do not run if we are looking at decisions or plots
	-- the reset function of these should have 
	-- already set the clickable boolean, but this is a failsafe
	if self.hud_decision_dynamic.screen_isactive or self.hud_plot_dynamic.screen_isactive or self.hud_popup_dynamic.screen_isactive then
		return false
	end

	if self.hud_can_select_go_items then
		return true
	else
		return false
	end

end


-- HUD Screen: Popup 
local function Screen_Popup_Reset(self, enabled_setting, run_sizing, body_text, title_text)

	-- reset Popup screen of HUD

	-- default args
	if enabled_setting == nil then
		enabled_setting = false
	end

	-- set enabled status
	local constant = self.hud_popup_constant
	local controller_node = gui.get_node(constant.node_controller)

	-- run enabling status and possibly sizing
	local function func_done(self, node)

		gui.set_enabled(node, enabled_setting)

	end

	if run_sizing then
		if enabled_setting then
			func_done(self, controller_node)
			gui.set_scale(controller_node, MY_GOO.MINIMIZE)
			gui.animate(controller_node, "scale", MY_GOO.MAXIMIZE, gui.EASING_OUTBACK, 0.50, 0)
		else
			--gui.set_scale(controller_node, MY_GOO.MAXIMIZE)
			gui.animate(controller_node, "scale", MY_GOO.MINIMIZE, gui.EASING_INBACK, 0.50, 0, func_done)
		end
	else
		func_done(self, controller_node)
	end

	-- reset tracking table
	self.hud_popup_dynamic.screen_isactive = enabled_setting
	self.hud_popup_dynamic.is_maximized = true

	-- enable and set text
	if body_text ~= nil then
		gui.set_text(gui.get_node(constant.node_text_body), body_text)
	end
	title_text = title_text or "New Information"
	if title_text ~= nil then
		gui.set_text(gui.get_node(constant.node_text_title), title_text)
	end

end

local function Screen_Popup_Initialize(self, enabled_status)

	-- set contants and setup dynamic values and components

	local basename = "hud_newinfo"

	self.hud_popup_constant = nil
	self.hud_popup_dynamic = nil

	-- set constants
	self.hud_popup_constant = {
		hud_basename = basename,
		node_controller = basename .. "/gnode_controller",
		goo_continue_name = basename .. "/group_button_submit",
		node_text_title = basename .. "/group_header/gui_frame_text",
		node_text_body = basename .. "/gnode_info_text",
	}

	-- set dynamics
	self.hud_popup_dynamic = {}
	Screen_Popup_Reset(self, enabled_status)

end

local function Screen_Popup_Input(self, action_id, action)

	-- runs 'On Input' for Decision screen on HUD

	-- early out if not allowed to use
	if not self.hud_popup_dynamic.screen_isactive or self.hud_decision_dynamic.screen_isactive or self.hud_plot_dynamic.screen_isactive then
		return
	end

	local Info = self.hud_popup_constant

	local function func_continue(button)

		-- handle all the button functionality

		-- set that this screen is no longer interactive
		Screen_Popup_Reset(self, false, true)

		print("Continue Button was pressed")

		if self.gameplay_loop_status == CV_gameplay_loop.status_started then
			if self.gameplay_loop_completion_type == STR.CV.goal_completed_types.class_new_information_only then
				msg.post(".", HSH.msg_request_game_progress)
			end
		end

	end

	MY_GOO.button_simple(Info.goo_continue_name, action_id, action, func_continue)

end


-- HUD Screen: Decision
local function Screen_Decision_Reset(self, enabled_setting, run_sizing, reset_tracker_variables, num_options, question_text, answer_text_tbl)

	-- reset Decision screen of HUD

	-- default args
	if enabled_setting == nil then
		enabled_setting = false
	end
	if reset_tracker_variables == nil then
		reset_tracker_variables = false
	end
	if num_options == nil then
		num_options = 3
	end

	-- set enabled status
	local constant = self.hud_decision_constant
	local controller_node = gui.get_node(constant.node_controller)

	-- run enabling status and possibly sizing
	local function func_done(self, node)

		gui.set_enabled(node, enabled_setting)

		-- get which buttons to enable/disable when starting up/enabling
		-- disable all buttons to start except for those that will be used
		if enabled_setting then
			for i_node_num,v_node_id in ipairs(constant.goo_option_names) do
				local status = false
				if i_node_num <= num_options then
					status = true
				end
				gui.set_enabled(gui.get_node(v_node_id..constant.goo_option_core_basename), status)
				gui.set_enabled(gui.get_node(v_node_id..constant.goo_option_label_basename), status)
			end

			-- set base position and height of frame and submit button depending on number of options
			local pos_update = constant.goo_option_placement[num_options]
			gui.set_position(node, vmath.vector3(gui.get_position(node).x, pos_update.frame_position_y, 0))

			local frame_node = gui.get_node(constant.node_frame)
			gui.set_size(frame_node, vmath.vector3(gui.get_size(frame_node).x, pos_update.frame_ylength, 0))

			local button_node = gui.get_node(constant.node_submit_box_name)
			local current_pos_button = gui.get_position(button_node)
			gui.set_position(button_node, vmath.vector3(current_pos_button.x, pos_update.submit_position_y, 0))

		end

	end

	if run_sizing then
		if enabled_setting then
			func_done(self, controller_node)
			gui.set_scale(controller_node, MY_GOO.MINIMIZE)
			gui.animate(controller_node, "scale", MY_GOO.MAXIMIZE, gui.EASING_OUTBACK, 0.50, 0)
		else
			--gui.set_scale(controller_node, MY_GOO.MAXIMIZE)
			gui.animate(controller_node, "scale", MY_GOO.MINIMIZE, gui.EASING_INBACK, 0.50, 0, func_done)
		end
	else
		func_done(self, controller_node)
	end

	-- exit if not resetting answer option tracker variables
	if not reset_tracker_variables then return end

	-- reset tracking table
	self.hud_decision_dynamic.screen_isactive = enabled_setting
	self.hud_decision_dynamic.goo_option_selected = 0
	self.hud_decision_dynamic.goo_sumbit_isactive = false
	self.hud_decision_dynamic.number_answer_options = num_options

	-- actually reset radio nodes, including resetting text color
	for _,v_nodeid in ipairs(constant.goo_option_names) do
		gui.set_color(gui.get_node(v_nodeid..constant.goo_option_label_basename), MY_GOO.COLOR_TEXT_DEFAULT)
		MY_GOO.radio(v_nodeid).set_selected(false)
	end

	-- set tint on button to dark/locked
	gui.set_color(gui.get_node(constant.node_submit_box_name), MY_GOO.COLOR_LOCKED)
	gui.set_color(gui.get_node(constant.node_submit_text_name), MY_GOO.COLOR_LOCKED)

	-- set text 
	if question_text ~= nil then
		gui.set_text(gui.get_node(constant.node_question_text), question_text)
	end

	-- update answer option text and save keys in same order
	self.hud_decision_dynamic.answer_choice_keys = nil
	self.hud_decision_dynamic.answer_choice_keys = {}
	if type(answer_text_tbl) == "table" then
		for i,v_info in ipairs(answer_text_tbl) do
			local q_node_name = constant.goo_option_names[i]..constant.goo_option_label_basename
			gui.set_text(gui.get_node(q_node_name), v_info.choice_text_answer)
			self.hud_decision_dynamic.answer_choice_keys[i] = v_info.user_choice_key
		end
	end

end

local function Screen_Decision_Initialize(self, enabled_status)

	-- set contants and setup dynamic values and components

	local basename = "hud_decision"

	self.hud_decision_constant = nil
	self.hud_decision_dynamic = nil

	-- set constants
	self.hud_decision_constant = {
		hud_basename = basename,
		node_controller = basename .. "/gnode_controller",
		node_frame = basename .. "/group_body/gui_frame_core",
		node_question_text = basename .. "/gnode_question_text",
		goo_option_placement = {
			{frame_ylength = 740, frame_position_y = 450, submit_position_y = -368},
			{frame_ylength = 740, frame_position_y = 450, submit_position_y = -368},
			{frame_ylength = 740, frame_position_y = 450, submit_position_y = -368},
			{frame_ylength = 868, frame_position_y = 536, submit_position_y = -495}
		},
		goo_option_names = {
			basename.."/group_option_1",
			basename.."/group_option_2",
			basename.."/group_option_3",
			basename.."/group_option_4"
		},
		goo_option_label_basename = "/gui_radio_label",
		goo_option_core_basename = "/gui_radio_core",
		goo_submit_name = basename.."/group_button_submit",
		node_submit_box_name = basename.."/group_button_submit/gui_button_core",
		node_submit_text_name = basename.."/group_button_submit/gui_button_label",
	}

	-- set dynamics
	self.hud_decision_dynamic = {}
	local run_sizer = false
	local reset_answers = true
	Screen_Decision_Reset(self, enabled_status, run_sizer, reset_answers)

end

local function Screen_Decision_Input(self, action_id, action)

	-- runs 'On Input' for Decision screen on HUD

	-- early out if not allowed to use
	if not self.hud_decision_dynamic.screen_isactive or self.hud_plot_dynamic.screen_isactive then
		return
	end

	local Info = self.hud_decision_constant
	local num_options = self.hud_decision_dynamic.number_answer_options

	local function func_radiogroup(local_group_id, local_action_id, local_action)

		-- handles all the radio functionality

		local function radio_base(index)

			-- run the logic when radio selected

			-- set the selected index and allow the submit button
			self.hud_decision_dynamic.goo_option_selected = index
			self.hud_decision_dynamic.goo_sumbit_isactive = true
			gui.set_color(gui.get_node(Info.node_submit_box_name), MY_GOO.COLOR_DEFAULT)
			gui.set_color(gui.get_node(Info.node_submit_text_name), MY_GOO.COLOR_TEXT_DEFAULT)

			-- visually highlight which choice was selected
			local other_nodes = {1, 2, 3}
			other_nodes[index] = nil

			-- note that trying to use the bright white makes text darker actually
			gui.set_color(gui.get_node(Info.goo_option_names[index]..Info.goo_option_label_basename), MY_GOO.COLOR_TEXT_DEFAULT)
			for _,v_otherindex in pairs(other_nodes) do
				gui.set_color(gui.get_node(Info.goo_option_names[v_otherindex]..Info.goo_option_label_basename), MY_GOO.COLOR_TEXT_UNSELECTED)
			end

			print("radio "..index.." selected")
		end

		local function func_radio_1(radio)
			radio_base(1)
		end
		local function func_radio_2(radio)
			radio_base(2)
		end
		local function func_radio_3(radio)
			radio_base(3)
		end
		local function func_radio_4(radio)
			radio_base(4)
		end

		if num_options >= 1 then
			MY_GOO.radio(Info.goo_option_names[1], local_group_id, local_action_id, local_action, func_radio_1)
		end
		if num_options >= 2 then
			MY_GOO.radio(Info.goo_option_names[2], local_group_id, local_action_id, local_action, func_radio_2)
		end
		if num_options >= 3 then
			MY_GOO.radio(Info.goo_option_names[3], local_group_id, local_action_id, local_action, func_radio_3)
		end
		if num_options >= 4 then
			MY_GOO.radio(Info.goo_option_names[4], local_group_id, local_action_id, local_action, func_radio_4)
		end

	end

	local function func_submit(button)

		-- handle all the button functionality
		local run_sizer = true
		local reset_values = true
		--^ need to have tracker as off so if plot checks it properly knows what the status is
		-- if plot thinks decisions is still on it can re-enable decision 
		--#TODO save the values to master table before clearing them!
		Screen_Decision_Reset(self, false, run_sizer, reset_values)

		print("Submit Button was pressed")

		if self.gameplay_loop_status == CV_gameplay_loop.status_started then
			if self.gameplay_loop_completion_type == STR.CV.goal_completed_types.class_decisison_only then
				-- do debrief text if present
				-- this consists of opening popup window and setting goal type
				local i = self.hud_decision_dynamic.goo_option_selected
				local stage_key, substage_key = Get_Current_Stage_Substage(self)
				local debrief_text = STR:Get_Decision_Text_AnswerDebrief(stage_key, substage_key, self.character_role_key, i)

				if debrief_text ~= nil and debrief_text ~= "" then
					self.gameplay_loop_completion_type = STR.CV.goal_completed_types.class_click_items_only
					Screen_Popup_Reset(self, true, true, debrief_text, "Update")
				else
					msg.post(".", HSH.msg_request_game_progress)
				end
			end
		end

	end

	MY_GOO.radiogroup("radiogroup_answer_options", action_id, action, func_radiogroup)

	if self.hud_decision_dynamic.goo_sumbit_isactive then
		MY_GOO.button_simple(Info.goo_submit_name, action_id, action, func_submit)
	end

end


-- HUD Screen: Graph Plot 
local function Screen_Plot_Reset(self, enabled_setting, item_group_key, run_sizing)

	-- reset Graph Plot screen of HUD

	-- default args
	if enabled_setting == nil then
		enabled_setting = false
	end

	-- set enabled status
	local constant = self.hud_plot_constant
	local controller_node = gui.get_node(constant.node_controller)

	-- run enabling status and possibly sizing
	local function func_done(self, node)

		gui.set_enabled(node, enabled_setting)

		-- if enabling 
			-- if decision tracker is active then disable decision node
		-- if disabling
			-- if decision tracker is active then enable decision node
		local run_decision_sizer = false
		local reset_values = false
		if enabled_setting then
			if self.hud_decision_dynamic.screen_isactive then
				Screen_Decision_Reset(self, false, run_decision_sizer, reset_values)
			end
		else
			if self.hud_decision_dynamic.screen_isactive then
				Screen_Decision_Reset(self, true, run_decision_sizer, reset_values)
			end
		end

	end

	if run_sizing then
		if enabled_setting then
			func_done(self, controller_node)
			gui.set_scale(controller_node, MY_GOO.MINIMIZE)
			gui.animate(controller_node, "scale", MY_GOO.MAXIMIZE, gui.EASING_OUTBACK, 0.50, 0)
		else
			--gui.set_scale(controller_node, MY_GOO.MAXIMIZE)
			gui.animate(controller_node, "scale", MY_GOO.MINIMIZE, gui.EASING_INBACK, 0.50, 0, func_done)
		end
	else
		func_done(self, controller_node)
	end

	-- reset tracker variables
	self.hud_plot_dynamic.screen_isactive = enabled_setting

	-- if enabling then update graph
	if not enabled_setting or item_group_key == nil then return end

	-- set the axis and labels depending on the specified item group
	local item_info = CV_item_groups[item_group_key]
	if item_info == nil then
		print("Error, the following key does not exist in the item groups list: "..item_group_key.."\n")
		return
	end

	-- set title
	local title = item_info.plot_y_label .. " through Time"
	title = string.gsub(title, " ", "   ")
	gui.set_text(gui.get_node(constant.node_title_name), title)

	-- set y axis label and ticks
	local y_label = string.gsub(item_info.plot_y_label, " ", "   ")
	gui.set_text(gui.get_node(constant.node_y_label), y_label)

	-- set plot height and toggle
	local ytick_start = item_info.plot_y_range[1]
	local ytick_step = (item_info.plot_y_range[2] - ytick_start) / (constant.number_y_ticks - 1)

	for i,v_node_y_tickname in ipairs(constant.node_y_ticks) do
		local tick_label = string.format("%.2f", ytick_start + (ytick_step*(i-1)))
		gui.set_text(gui.get_node(v_node_y_tickname), tick_label)
	end

	--#TODO enable and set graph bars accordingly

end

local function Screen_Plot_Initialize(self, enabled_status)

	-- set contants and setup dynamic values and components

	local basename = "hud_timeplot"
	local plot_base = "/group_plot"
	local num_y_ticks = 6

	self.hud_plot_constant = nil
	self.hud_plot_dynamic = nil

	-- set constants
	self.hud_plot_constant = {
		hud_basename = basename,
		node_controller = basename .. "/gnode_controller",
		goo_exit_name = basename .. "/group_button_submit",
		node_title_name = basename .. plot_base .. "/gui_text_title",
		node_y_label = basename .. plot_base .. "/gui_text_label_yaxis",
		node_y_ticks = {},
		number_y_ticks = num_y_ticks
	}

	-- add ytick labels
	local ytick_base = basename .. plot_base .. "/gui_text_label_ytick_" -- save this for 'Find All' searches: "gui_text_label_ytick_0"
	for i=1,num_y_ticks do
		self.hud_plot_constant.node_y_ticks[i] = ytick_base..tostring(i-1)
	end

	-- set dynamics
	self.hud_plot_dynamic = {}
	Screen_Plot_Reset(self, enabled_status)

end

local function Screen_Plot_Input(self, action_id, action)

	-- runs 'On Input' for Decision screen on HUD

	-- early out if not allowed to use
	if not self.hud_plot_dynamic.screen_isactive then
		return
	end

	local Info = self.hud_plot_constant

	local function func_exit(button)

		-- handle all the button functionality

		-- set that this screen is no longer interactive
		Screen_Plot_Reset(self, false, nil, true)

		print("Exit Button was pressed")

	end

	MY_GOO.button_simple(Info.goo_exit_name, action_id, action, func_exit)

end


-- HUD Screen: Data
local function Screen_Data_Reset(self, enabled_setting)

	-- reset Data screen of HUD

	-- default args
	if enabled_setting == nil then
		enabled_setting = false
	end

	-- set enabled status
	local constant = self.hud_data_constant
	gui.set_enabled(gui.get_node(constant.node_controller), enabled_setting)

	-- reset tracking table
	self.hud_data_dynamic.screen_isactive = enabled_setting
	self.hud_data_dynamic.is_maximized = true
	self.hud_data_dynamic.goo_items_areactive = true

	--#TODO enable and set bars accordingly

end

local function Screen_Data_Initialize(self, enabled_status)

	-- set contants and setup dynamic values and components

	local basename = "hud_data"

	self.hud_data_constant = nil
	self.hud_data_dynamic = nil

	-- set constants
	self.hud_data_constant = {
		hud_basename = basename,
		node_frame_core = basename .. "/group_frame/gui_frame_core",
		node_controller = basename .. "/gnode_controller",
		node_subcontroller = basename .. "/gnode_subcontroller",
		node_max_length = basename .. "/tracker_max_length",
		node_min_length = basename .. "/tracker_min_length",
		goo_minimizer = basename .. "/group_button_sizer",
		goo_item_gotograph = "/group_button_goto",
		item_health_bar_basename = "/group_healthbar/gui_frame_progress",
		item_text_basename = "/gnode_body_text",
		goo_group_names = {},
		goo_group_goto_buttons = {},
	}

	-- add button strings contcatenated
	for k,v in pairs(CV_item_groups) do
		local name = basename .. v.group_name
		self.hud_data_constant.goo_group_names[k] = name
		self.hud_data_constant.goo_group_goto_buttons[k] = name .. self.hud_data_constant.goo_item_gotograph
	end

	-- set dynamics
	self.hud_data_dynamic = {}
	Screen_Data_Reset(self, enabled_status)

end

local function Screen_Data_Input(self, action_id, action)

	-- runs 'On Input' for Data screen on HUD

	-- early out if not allowed to use
	if not self.hud_data_dynamic.screen_isactive then
		return
	end

	local Info = self.hud_data_constant

	-- sizer button
	local function func_button_sizer(button)

		-- handle all the button functionality

		local function func_shrink(self, subcontroller_node)
			gui.set_enabled(subcontroller_node, false)
		end

		local function func_expand(self, subcontroller_node)
			gui.set_enabled(subcontroller_node, true)
		end

		-- if is currently maximized then shrink
		-- if is not currently maximized then expand

		local is_now_maximized
		local subcontroller_node = gui.get_node(Info.node_subcontroller)

		local frame_node = gui.get_node(Info.node_frame_core)

		if self.hud_data_dynamic.is_maximized then
			-- run shrink and disable
			is_now_maximized = false
			gui.animate(frame_node, "size.y", gui.get_size(gui.get_node(Info.node_min_length)).y, gui.EASING_INBACK, 0.4)
			gui.animate(subcontroller_node, "scale", MY_GOO.MINIMIZE, gui.EASING_INBACK, 0.35, 0, func_shrink)
		else
			-- run expand and enable
			is_now_maximized = true
			-- needs to be enabled to have size change, 
			-- but since default is large, will already be set small when disabled
			gui.set_enabled(subcontroller_node, true)
			gui.animate(frame_node, "size.y", gui.get_size(gui.get_node(Info.node_max_length)).y, gui.EASING_OUTBACK, 0.4)
			gui.animate(subcontroller_node, "scale", MY_GOO.MAXIMIZE, gui.EASING_OUTBACK, 0.35, 0, func_expand)
		end

		-- update booleans
		self.hud_data_dynamic.goo_items_areactive = is_now_maximized
		self.hud_data_dynamic.is_maximized = is_now_maximized

		print("Sizer was toggled. Is now maximized is "..tostring(is_now_maximized))

	end

	MY_GOO.checkbox_sizer(Info.goo_minimizer, action_id, action, func_button_sizer)


	-- goto buttons
	local function func_goto_core(table_key)

		-- handle all functionality for the goto graph buttons

		-- if active then just overwrite 
		-- if not active then expand
		local needs_expanding = not self.hud_plot_dynamic.screen_isactive

		Screen_Plot_Reset(self, true, table_key, needs_expanding)

		print("Goto button was pressed for "..table_key)

	end

	local function func_goto_ph(button)
		func_goto_core("item_ph")
	end
	local function func_goto_plankton(button)
		func_goto_core("item_plankton")
	end
	local function func_goto_coral(button)
		func_goto_core("item_coral")
	end
	local function func_goto_fish(button)
		func_goto_core("item_fish")
	end
	local function func_goto_mollusks(button)
		func_goto_core("item_mollusks")
	end
	local function func_goto_crustaceans(button)
		func_goto_core("item_crustaceans")
	end
	local function func_goto_humans(button)
		func_goto_core("item_humans")
	end

	if self.hud_data_dynamic.goo_items_areactive then
		local gotos = Info.goo_group_goto_buttons
		MY_GOO.button_goto(gotos.item_ph, action_id, action, func_goto_ph)
		MY_GOO.button_goto(gotos.item_plankton, action_id, action, func_goto_plankton)
		MY_GOO.button_goto(gotos.item_coral, action_id, action, func_goto_coral)
		MY_GOO.button_goto(gotos.item_fish, action_id, action, func_goto_fish)
		MY_GOO.button_goto(gotos.item_mollusks, action_id, action, func_goto_mollusks)
		MY_GOO.button_goto(gotos.item_crustaceans, action_id, action, func_goto_crustaceans)
		MY_GOO.button_goto(gotos.item_humans, action_id, action, func_goto_humans)
	end

end


-- HUD Screen: Goals
local function Screen_Goals_Reset(self, enabled_setting, run_sizing, text)

	-- reset Goals screen of HUD

	-- default args
	if enabled_setting == nil then
		enabled_setting = false
	end

	-- set enabled status
	local constant = self.hud_goals_constant
	local controller_node = gui.get_node(constant.node_controller)

	-- run enabling status and possibly sizing
	local function func_done(self, node)

		gui.set_enabled(node, enabled_setting)

	end

	if run_sizing then
		if enabled_setting then
			func_done(self, controller_node)
			gui.set_scale(controller_node, MY_GOO.MINIMIZE)
			gui.animate(controller_node, "scale", MY_GOO.MAXIMIZE, gui.EASING_OUTBACK, 0.50, 0)
		else
			--gui.set_scale(controller_node, MY_GOO.MAXIMIZE)
			gui.animate(controller_node, "scale", MY_GOO.MINIMIZE, gui.EASING_INBACK, 0.50, 0, func_done)
		end
	else
		func_done(self, controller_node)
	end

	-- reset tracking table
	self.hud_goals_dynamic.screen_isactive = enabled_setting
	self.hud_goals_dynamic.is_maximized = true

	-- enable and set text
	if text ~= nil then
		gui.set_text(gui.get_node(constant.node_text_body), text)
	end

end

local function Screen_Goals_Initialize(self, enabled_status)

	-- set contants and setup dynamic values and components

	local basename = "hud_goals"

	self.hud_goals_constant = nil
	self.hud_goals_dynamic = nil

	-- set constants
	self.hud_goals_constant = {
		hud_basename = basename,
		node_controller = basename .. "/gnode_controller",
		node_text_title = basename .. "/gnode_header_text",
		node_text_body = basename .. "/gnode_body_text",
		node_frame_core = basename .. "/group_frame/gui_frame_core"
	}

	-- set dynamics
	self.hud_goals_dynamic = {}
	Screen_Goals_Reset(self, enabled_status)

end

local function Screen_Goals_Input(self, action_id, action)

	-- runs 'On Input' for Goals screen on HUD

	-- early out if not allowed to use
	if not self.hud_goals_dynamic.screen_isactive then
		return
	end

	local Info = self.hud_goals_constant

	local function func_continue(button)

		-- handle all the button functionality

		-- set that this screen is no longer interactive
		Screen_Goals_Reset(self, false, true)

		print("Continue Button was pressed")

	end

end


-- HUD Process: Observe Items (Section 2)
local function On_GO_Item_Clicked_Requested(self, action_id, action)

	-- send request to get object items clicked on

	-- if data window is open do not register click if it was within the data bounds
	-- otherwise player may accidentally click on item if item is behind one of the buttons on the data screen
	if action_id == nil or action == nil then return end
	if action_id ~= HSH.control_touch then return end
	if not action.pressed then return end

	-- also check side bars, and return if we clicked in those
	if gui.pick_node(gui.get_node(self.hud_data_constant.node_frame_core), action.x, action.y) then
		--print("Clicked within data frame, not checking rest...\n")
		return
	elseif gui.pick_node(gui.get_node(self.hud_goals_constant.node_frame_core), action.x, action.y) then
		--print("Clicked within data frame, not checking rest...\n")
		return
	end

	-- if valid ocean click then check if for item selecting or just something simple like bubbles

	if On_GO_Items_Clicked_Basic_Valid(self) then
		msg.post("level_controller", HSH.msg_request_go_clicked, {minfo_action = action})
	else
		msg.post("level_controller", HSH.msg_request_make_bubbles, {minfo_action = action})
	end

end

local function On_GO_Item_Clicked_Received(self, clicked_info)

	-- runs process when player clicks on go item(s)

	-- in form 
	-- match_id_tbl[k_item_name] = {selected_go_url = k_goid, selected_go_subitem = k_subitem_name}

	-- early exits
	if not On_GO_Items_Clicked_Basic_Valid(self) then return end

	if type(clicked_info) ~= "table" then return end

	if clicked_info.minfo_match_tbl == nil then return end
	if clicked_info.minfo_match_count == nil then return end
	if clicked_info.minfo_match_count <= 0 then return end

	-- get which groups we are checking clicks for
	local needs_clicked = self.items_that_need_clicked_list
	if self.items_that_need_clicked_sum == 0 then return end

	-- might have clicked on more then one item if they were overlapping so
	-- find first group that is on 'needs to be clicked' list but not on 'is clicked list'
	local valid_item_clicked
	local back_item_clicked
	for k_itemname, _ in pairs(clicked_info.minfo_match_tbl) do
		-- on 'needs clicked list'
		if needs_clicked[k_itemname] ~= nil then
			-- checked if it has been clicked or not, 
			-- items not clicked take priority so the list can actually be doable

			if self.items_that_were_clicked_list[k_itemname] == nil then
				-- has not yet been clicked, so add it
				valid_item_clicked = k_itemname

				self.items_that_were_clicked_list[k_itemname] = true

				if self.items_that_were_clicked_sum < self.items_that_need_clicked_sum then
					self.items_that_were_clicked_sum = self.items_that_were_clicked_sum + 1
				end

				break
			else
				-- has been clicked, but maybe player wants to view graph again
				back_item_clicked = k_itemname
			end

		end
	end

	-- finish process to click on and save data on items
	-- popup graph, which will also disable ocean script clicking
	-- also set color in data view for color and bar
	local graph_item = valid_item_clicked or back_item_clicked
	if graph_item ~= nil then
		print("Item clicked and opening graph for <"..graph_item..">. \n ")
		Screen_Plot_Reset(self, true, graph_item, true)
		Items_Set_Color_Tracking(self, graph_item, false)
	end

	-- if this was last on list then set variable that all are done
	if self.items_that_were_clicked_sum >= self.items_that_need_clicked_sum then
		self.items_all_clicked = true
		print("All items that need to be clicked were clicked. \n")
	end

end


-- HUD Process: Screen Fader
local function Run_Fader(self, fade_out, time)

	-- run either fade in or fade out

	-- setup variables
	local fader_node = gui.get_node("gnode_screen_fader")
	local alpha, disable_at_end
	if fade_out then
		gui.set_enabled(fader_node, true)
		alpha = 1.0
		disable_at_end = false
	else
		alpha = 0.0
		disable_at_end = true
	end

	time = time or 2.0

	-- cancel any current fades
	gui.cancel_animation(fader_node, "color.w")

	-- declare callback for readability and thought of optimization
	local function func_set_status()
		if disable_at_end then
			gui.set_enabled(fader_node, false)
		end
	end

	-- run fader animation
	gui.animate(fader_node, "color.w", alpha, go.EASING_LINEAR, time, 0, func_set_status)

end


local function Close_All_Center_Screens(self)

	-- close any open screens in center window

	local run_sizing = true
	local enabled_status = false

	-- popup/new info
	if self.hud_popup_dynamic.screen_isactive then
		Screen_Popup_Reset(self, enabled_status, run_sizing)
	end

	-- decision
	if self.hud_decision_dynamic.screen_isactive then
		Screen_Decision_Reset(self, enabled_status, run_sizing)
	end

	-- plot
	if self.hud_plot_dynamic.screen_isactive then
		Screen_Plot_Reset(self, enabled_status, run_sizing)
	end

end

-- HUD Process: Game Loop
local function GameLogic_Progress(self, i_stage_addition)

	-- setups and runs next gameplay event

	if i_stage_addition == nil then
		i_stage_addition = 1
	end

	self.gameplay_loop_i_key = self.gameplay_loop_i_key + i_stage_addition

	local stage_key, substage_key = Get_Current_Stage_Substage(self)

	-- get and update goal text
	local goal_text = STR:Get_Goal_Text(stage_key, substage_key)
	local run_goal_sizing = not self.hud_goals_dynamic.screen_isactive
	Screen_Goals_Reset(self, true, run_goal_sizing, goal_text)

	-- run other logic
	self.gameplay_loop_status = CV_gameplay_loop.status_started

	-- close any other plots or popups or decisions
	Close_All_Center_Screens(self)

	-- get type of event and start associated screens
	local stage_type = STR:Get_Completion_Type(stage_key, substage_key)
	local st = STR.CV.goal_completed_types
	self.gameplay_loop_completion_type = stage_type

	print("Running stage <"..stage_key.."> with substage <"..substage_key.."> with completion type <"..stage_type.."> \n")

	if stage_type == st.class_click_items_only then
		--

	elseif stage_type == st.class_decisison_only then
		local q_text = STR:Get_Decision_Text_Question(stage_key, substage_key, self.character_role_key)
		local a_tbl = STR:Get_Decision_Text_Options(stage_key, substage_key, self.character_role_key)
		Screen_Decision_Reset(self, true, true, true, #a_tbl, q_text, a_tbl)

	elseif stage_type == st.class_new_information_only then
		local popup_text_body = STR:Get_NewInfo_Text_Body(stage_key, substage_key)
		Screen_Popup_Reset(self, true, true, popup_text_body)

	elseif stage_type == st.class_new_information_and_click_items then
		local popup_text_body = STR:Get_NewInfo_Text_Body(stage_key, substage_key)
		Screen_Popup_Reset(self, true, true, popup_text_body)

	end

end

local function GameLogic_Start(self)

	MY_GOO.acquire_input()

	local set_enabled = false

	On_GO_Items_Clicked_Reset(self, set_enabled)
	Screen_Goals_Initialize(self, set_enabled)
	Screen_Decision_Initialize(self, set_enabled)
	Screen_Data_Initialize(self, set_enabled)
	Screen_Plot_Initialize(self, set_enabled)
	--Items_Click_Status_Reset(self, {"item_fish"})
	Screen_Popup_Initialize(self, set_enabled)

	self.input_is_possible = true

	self.character_role_key = "none"
	self.gameplay_loop_completion_type = 0
	self.gameplay_loop_i_key = 0

	-- get stage and substage list in order
	self.gameplay_loop_status = CV_gameplay_loop.status_unknown
	self.gameplay_loop_order = STR:GameOrder_CreateTable()

	-- kick off first action
	GameLogic_Progress(self)

end


function init(self)

	GameLogic_Start(self)

end

function on_message(self, message_id, message, sender)

	if message_id == HSH.msg_request_fade_out or message_id == HSH.msg_request_fade_in then
		Run_Fader(self, message_id == HSH.msg_request_fade_out, message.minfo_fade_duration)
	elseif message_id == HSH.msg_report_go_clicked then
		On_GO_Item_Clicked_Received(self, message)
	elseif message_id == HSH.msg_request_game_progress then
		GameLogic_Progress(self, 1)
	elseif message_id == HSH.msg_request_game_repeat then
		GameLogic_Progress(self, 0)
	end

end

function on_input(self, action_id, action)

	if not self.input_is_possible then return end

	Screen_Decision_Input(self, action_id, action)
	Screen_Data_Input(self, action_id, action)
	Screen_Plot_Input(self, action_id, action)
	Screen_Popup_Input(self, action_id, action)
	On_GO_Item_Clicked_Requested(self, action_id, action)

end
