-- OVERVIEW:
-- setups and controls an individual boat
-- Requirements: 
--   individual game object must have particle effects and sound

-- dependencies
local RES = require ("modules.screen_res_md")
local HSH = require ("modules.hashes_md")
local INFO = require("modules.item_info_md")

-- properties
go.property("Obj_Item_Enum", -1)
go.property("Obj_Subitem_Enum", -1)
go.property("Obj_Translation_Speed_Max", 100)
go.property("Obj_Dimension_X", 450)


-- functions
local function Move_to_Position_X(self, x_location, delete_self_when_done)

	-- orders boat to move to given x while running particles

	-- defaults 
	x_location = x_location or 0

	-- setup
	local easing = go.EASING_INOUTSINE
	local distance = math.abs(go.get(".", "position.x") - x_location)
	local move_duration = 0
	local max_speed = self.Obj_Translation_Speed_Max
	if distance > 0 and max_speed > 0 then
		move_duration = distance / max_speed
	end
	local delay = 0

	-- setup to stop bubbles and sound when done moving
	local function func_stop_bubbles(self)

		if delete_self_when_done then
			go.delete()
		end

	end

	-- make boat move and run particles for same duration
	particlefx.play("#particlefx")

	sound.play("#sound", {delay = 0, gain = 0.20, pan = 0, speed = 1.0})

	go.animate(".", "position.x", go.PLAYBACK_ONCE_FORWARD, x_location, easing, move_duration, delay, func_stop_bubbles)

end

local function OnExpire(self)

	Move_to_Position_X(self, RES.Boundary_X[2] + self.Obj_Dimension_X, true)

end

local function OnPauseToggle(self, game_pause_toggle)

	sound.pause("#sound", game_pause_toggle)

end

local function GO_Setup(self)

	-- float back an forth
	go.animate(".", "euler.z", go.PLAYBACK_LOOP_PINGPONG, -1, go.EASING_INOUTSINE, 3, 0.1)

end


function init(self)

	GO_Setup(self)

end

function final(self)

	sound.stop("#sound")
	particlefx.stop("#particlefx", {clear = false})

end

function on_message(self, message_id, message, sender)

	if message_id == HSH.msg_pause_game_msg_sent then
		OnPauseToggle(self, message.minfo_game_paused)
	end

	if message_id == HSH.msg_order_swim_to_pos then

		-- start swimming to new position
		Move_to_Position_X(self, message.minfo_swim_to_x, message.minfo)

	elseif message_id == HSH.msg_order_expire_start then
		OnExpire(self)

	end

end

