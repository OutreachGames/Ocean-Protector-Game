-- OVERVIEW:
-- controls game objects that move across the screen in a back and forth motion

-- dependencies
local RES = require ("modules.screen_res_md")
local EXT = require("modules.extend_md")
local HSH = require("modules.hashes_md")
local INFO = require("modules.item_info_md")

-- properties
go.property("Obj_Item_Enum", -1)
go.property("Obj_Subitem_Enum", -1)
go.property("Obj_Selected_Sprite_Option", 1)
go.property("Obj_Formation_Position_Index", 1)
go.property("Obj_Translation_Speed_Max", 20)
go.property("Obj_Rotation_Speed_Max", 15)
go.property("Obj_Spawn_Weight_0Algae", 20)
go.property("Obj_Spawn_Weight_1Diatom", 40)
go.property("Obj_Spawn_Weight_2Dinoflag", 40)
go.property("Obj_Health_0Algae", 30)
go.property("Obj_Health__1Diatom", 30)
go.property("Obj_Health__2Dinoflag", 30)
go.property("Obj_Spawn_Type_Current_Index", 0)
go.property("Obj_BaseGrid_Y_Height", 40)
go.property("Obj_BaseGrid_Y_Coordinate", 0)

-- locals for easy access
local CV_x_threshold_appear = -810
local CV_x_threshold_disappear = -545

local CV_type_to_sprite = {
	--0 is type algae
	--1 is type diatom
	--2 is type dinoflagellate
	typ_algae = {
		sprite_options = {"algae_1", "algae_2", "algae_3"},
		index_type = 0,
		prop_weight_key = "Obj_Spawn_Weight_0Algae",
		use_random_flip = true,
		use_random_rotation = true
	},
	typ_diatom = {
		sprite_options = {"diatom_1", "diatom_2", "diatom_3"},
		index_type = 1,
		prop_weight_key = "Obj_Spawn_Weight_1Diatom",
		use_random_flip = true,
		use_random_rotation = true
	},
	type_dinoflag = {
		sprite_options = {"dinoflag_1", "dinoflag_2", "dinoflag_3"},
		index_type = 2,
		prop_weight_key = "Obj_Spawn_Weight_2Dinoflag",
		use_random_flip = false,
		use_random_rotation = true
	}
}


--functions
local function OnExpire(self)

	msg.post("/level_controller", HSH.msg_reported_expire_done, {minfo_spawn_list_key = INFO:Get_Spawn_List_Key(self.Obj_Item_Enum, self.Obj_Subitem_Enum)})

end

local function UpdateSprite(self)

	--chooses random type
	local choices = {}
	for k,v in pairs(CV_type_to_sprite) do
		table.insert(choices, {k, self[v.prop_weight_key]})
	end

	local selected_typ_key = EXT:math_Random_Weighted(choices)

	--print("Selected phytoplankton type "..selected_typ_key.."\n")

	self.Obj_Spawn_Type_Current_Key = selected_typ_key

	--updates sprite type and tracking data

	local meta_info = CV_type_to_sprite[selected_typ_key]
	local sprite_animation = EXT:Random_fromTable(meta_info.sprite_options)

	sprite.play_flipbook("#sprite", sprite_animation)

	-- now tint for transparency according to health
	go.set("#sprite", "tint", vmath.vector4(1, 1, 1, 1))

	self.Sprite_Width = math.abs(go.get("#sprite", "size.x") * go.get(".", "scale.x"))

	-- give slight rotation
	local z_rot = 0
	if meta_info.use_random_rotation then
		z_rot = EXT:Random_Magnitude(0, 15) or 0
	end

	-- maybe flip
	--use z-rotation so we don't have to keep track of if sprite was flipped or not
	if meta_info.use_random_flip and math.random(0,1) == 1 then
		z_rot = z_rot + 180
	end

	go.set(".", "euler.z", z_rot)


end

local function ResetSpawn(self)

	-- sets type of phytoplankton along with sprite and current type
	-- also orders to move 

	-- choose and set type
	UpdateSprite(self)

	-- send on it's way, with completed call back doing this all again but at new position
	-- whereever go is, move to x_threshold_disappear + radius*1.2 
	-- once done reposition back to x_threshold_appear - radius*1.2

	local current_pos = go.get(".", "position.x")
	local end_pos = CV_x_threshold_disappear + ((self.Sprite_Width/2)*1.2)

	local distance = math.abs(end_pos - current_pos)
	local move_duration = 0
	local max_speed = self.Obj_Translation_Speed_Max
	if distance > 0 and max_speed > 0 then
		move_duration = distance / max_speed
	end

	--tweak y position just a bit, x has already been inherently tweaked by varying sprite widths
	local rand_y = math.floor(self.Obj_BaseGrid_Y_Height * 0.3)
	go.set(".", "position.y", self.Obj_BaseGrid_Y_Coordinate + math.random(-rand_y, rand_y))

	local function func_wrap_position_and_reset(self)

		local wrap_pos = CV_x_threshold_appear - ((self.Sprite_Width/2)*1.2)
		go.set(".", "position.x", wrap_pos)
		ResetSpawn(self)

	end

	go.animate(".", "position.x", go.PLAYBACK_ONCE_FORWARD, end_pos, go.EASING_LINEAR, move_duration, 0, func_wrap_position_and_reset)

end


function init(self)

	ResetSpawn(self)

end

function on_message(self, message_id, message, sender)

	if message_id == HSH.msg_order_expire_start then
		OnExpire(self)
	end

end
