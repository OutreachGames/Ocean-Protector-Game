
-- OVERVIEW:
-- setups and controls an individual coral
-- Requirements: 
--   individual game object must have two sprites

-- dependencies
local HSH = require ("modules.hashes_md")
local EXT = require ("modules.extend_md")
local RES = require ("modules.screen_res_md")
local INFO = require("modules.item_info_md")

-- properties
go.property("Obj_Item_Enum", -1)
go.property("Obj_Subitem_Enum", -1)
go.property("Obj_Selected_Sprite_Option", 1)
go.property("Obj_Wave_Sprite_FlipH", false)
go.property("Obj_OG_Scale_Float", 1)
go.property("Obj_Current_Health", 1)


-- locals for easy tuning
--local color_white = EXT.vec4_white
local color_black = EXT.vec4_black


-- functions
local function OnExpire(self)

	local function func_expire_update(self)
		msg.post("/level_controller", HSH.msg_reported_expire_done, {minfo_spawn_list_key = INFO:Get_Spawn_List_Key(self.Obj_Item_Enum, self.Obj_Subitem_Enum)})
	end

	local fadeout_time = 0.50
	go.animate("#sprite", "tint", go.PLAYBACK_ONCE_FORWARD, color_black, go.EASING_LINEAR, fadeout_time, 0, func_expire_update)

end

local function On_UpdateHealth(self, health_val, visual_update)

	-- set tint of sprite according to health value, default is 1 (full health)

	health_val = health_val or 1

	-- save previous health
	local current_health = self.Obj_Current_Health

	-- update static based on health value
	local new_tint_v4 = INFO:Get_Health_Tint_Vector4(self.Obj_Item_Enum, self.Obj_Subitem_Enum, health_val)

	-- #TODO update more here

	--if getting larger
	--	set scale of top sprite to 0.8 and alpha to 0.0
	--	set scale of bottom sprite to 0.8 and alpha to 1.0
	--	top sprite gradually grows and gets full alpha
	--		bottom sprite then set

	--if getting smaller
	--	set scale of top sprite to 1.0 and alpha to 1.0
	--	set scale of bottom sprite to 0.8 and alpha to 1.0
	--	top sprite gradually shrinks and gets 0 alpha
	--		bottom sprite already set

	if visual_update then
		-- animate tint and scale
		-- only change scale if new scale different than old scale
		local duration = 1.5
		go.animate("#sprite", "tint", go.PLAYBACK_ONCE_FORWARD, new_tint_v4, go.EASING_LINEAR, duration)
	else
		-- just sent tint and scale
		go.set("#sprite", "tint", new_tint_v4)
	end

	-- update to current health
	self.Obj_Current_Health = health_val

end

local function GO_Setup(self)

	--set selected sprite 

	-- recall, this sprite options need to be here, so that we can get the width
	-- cannot change sprite after init since width might be different
	local opts = INFO:Get_Subitem_SpriteOptions(self.Obj_Item_Enum, self.Obj_Subitem_Enum)
	if opts ~= nil then
		sprite.play_flipbook("#sprite", opts[self.Obj_Selected_Sprite_Option])
	end

	-- flip if specified
	if self.Obj_Wave_Sprite_FlipH then
		sprite.set_hflip("#sprite", true)
	end

	-- save original scale and color 
	self.Obj_Current_Health = 1
	self.Obj_OG_Scale_Float = go.get_scale().x

	On_UpdateHealth(self)

end


function init(self)

	GO_Setup(self)

end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)

	if message_id == HSH.msg_order_expire_start then
		OnExpire(self)
	elseif message_id == HSH.msg_order_update_health then
		On_UpdateHealth(self, message.minfo_new_health_value)
	end

end
